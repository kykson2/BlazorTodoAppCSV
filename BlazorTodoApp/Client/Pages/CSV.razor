@page "/CSV"
@inject BlazorTodoApp.Client.Services.BlobClientService _BlobClientService;
@using System;
@using System.IO;
@using Azure.Storage.Blobs;
@using Azure.Storage.Blobs.Models;
@using System.Reflection;

@inject NavigationManager NavigationManagerReference;


<div class=" d-flex flex-column">
    <InputFile OnChange="((e) => Upload(e))" style="display:none" id="inputFile" />
    <label for="inputFile" class="cds--btn cds--btn--primary text-md-center mt-4 p-5 rounded-2">Upload CSV!</label>
    <hr />
    <ul class="d-flex flex-column mt-4 gap-4">
        @if (csvBlobs.Count() == 0)
        {
            <li class="cds--inline-loading">
                <div class="inline cds--inline-loading__animation">
                    <div aria-atomic="true" aria-live="assertive" class="inline cds--loading cds--loading--small">
                        <svg class="cds--loading__svg" viewBox="0 0 100 100">
                            <title>loading</title>
                            <circle class="cds--loading__background" cx="50%" cy="50%" r="44"></circle>
                            <circle class="cds--loading__stroke" cx="50%" cy="50%" r="44"></circle>
                        </svg>
                    </div>
                </div>
                <div class="cds--inline-loading__text">CSV 가져오는 중...</div>
            </li>
        }
        else
        {
            <li class="d-inline-flex gap-3">
                <p class="flex-grow-1">CSV 파일이름</p>

                <p class="text-center" style="width:102px;">다운로드</p>
            </li>
            @foreach (var filename in csvBlobs)
            {
                <li class="d-inline-flex align-items-center gap-3">
                    <p class="flex-grow-1">@filename</p>
                    <button class="cds--btn cds--btn--secondary p-3 rounded-2 " type="button" @onclick="(async()=>{await GetCSVResult(filename); openCloseTable = true;})">
                        CSV 내용 보기
                    </button>
                    <button class="cds--btn cds--btn--ghost" @onclick="()=>DownloadCSV(filename)">DownLoad</button>
                </li>
            }
        }
    </ul>
    <hr />
    @if (openCloseTable)
    {
        <div class="d-flex flex-column position-relative">
            <button class="cds--btn cds--btn--secondary p-3 rounded-2 w-20 mt-5 position-absolute" style="right:0;" type="button" @onclick="(()=>{openCloseTable = false;})">
                <p>테이블 닫기</p>
            </button>
            <table class="cds--data-table cds--data-table--xl mt-12 cds--grid">
                <thead>
                    <tr class="">
                        @foreach (var item in myPropertyInfo)
                        {
                            <th><div class="cds--table-header-label cds--col">@item.Name</div></th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in csv)
                    {
                        <tr class="">
                            <td><div class="cds--col">@item.Id</div></td>
                            <td><div class="cds--col">@item.Name</div></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

</div>


@code {
    private List<CSVResultInfo> csv = new();
    private List<string> csvBlobs = new();
    private bool openCloseTable = false;
    private PropertyInfo[] myPropertyInfo;

    // private var csvKey = typeof(CSVResultInfo).GetProperties();
    protected override async Task OnInitializedAsync()
    {
        csvBlobs = await _BlobClientService.GetCSVBlob();
    }

    private async Task Upload(InputFileChangeEventArgs e)
    {
        await _BlobClientService.CSVUpload(e);
        csvBlobs = await _BlobClientService.GetCSVBlob();
    }

    private async Task GetCSVResult(string fileName)
    {
        csv = await _BlobClientService.GetCSVCosmos(fileName);
        myPropertyInfo = typeof(CSVResultInfo).GetProperties();
    }

    private async Task DownloadCSV(string filename)
    {
        var blobUri = await _BlobClientService.DownloadCSV(filename);
        NavigationManagerReference.NavigateTo(blobUri);
    }
}
